#include<vector>
#include<algorithm>
#include<iostream>
#include<stdio.h>
#include<cstring>
#include<queue>
#include<vector>

//다익스트라 알고리즘

struct edge{
	int vex;
	int dis;
	edge(int a, int b){
		vex = a;
		dis = b;
	}
	bool operator<(const edge &b) const {
		return dis>b.dis; //최소힙 
	}
}; 



int main(){
	//freopen("iupt.txt","rt",stdin);
	int n,m,i;
	int a,b,c;
	cin >> n >> m;
	
	priority_queue<edge> pq;
	vector<pair<int,int> > map[30];
	vector<int> dist(n+1,2147000000); //n+1개를 2147000000으로 초기화후 생성 
	
	for(i=0;i<m;i++){
		cin >> a>> b >> c;
		map[a].push_back(make_pair(b,c));
	}
	pq.push(edge(1,0));
	dist[1] = 0;
	while(!pq.empty()){
		int now = pq.top().vex;
		int cost = pq.top().dis;
		pq.pop();
		if(cost>dist[now]) continue;
		for(i=0;i<map[now].size();i++){
			int next = map[now][i].first;
			int nextdis = cost + map[now][i].second;
			if(dist[next]>nextdis) {
				dist[next] = nextdis;
				pq.push(edge(next,nextdis));
			}	
		}
	} 
	for(i=2;i<=n;i++){
		cout<< i <<" : ";
		if(dist[i]==2147000000) cout<<"impossible"<<"\n";
		else cout<< dist[i] <<"\n";
	}
	
} 